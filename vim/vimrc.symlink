" ====================================================
"   Initialize
" ====================================================

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" ====================================================
"   General Configuration
" ====================================================

" Line numbers are good
set number

" Allow backspace in Insert mode
set backspace=indent,eol,start

" Store :cmdline history
set history=1000

" Show incomplete commands
set showcmd

" Don't show intro
set shortmess+=I

" No sounds
set visualbell

" Reload files changed outside of Vim
set autoread

" Controls how Vim flashes the screen. If empty, Vim does not flash the screen.
set t_vb=

set noshowmode
set cursorline
set mousehide
set ttyfast
set laststatus=2

" This makes vim act like all other editors, buffers can
" exist in the background without being in a window.
" http://items.sjbach.com/319/configuring-vim-right
set hidden

" Make vim clipboard available
set clipboard=unnamed

" (Hopefully) removes the delay when hitting esc in insert mode
set ttimeout
set ttimeoutlen=1

" Remove dotted line on split windows
set fillchars+=vert:\

" Change leader key
map , <leader>
map <Space> <leader>

" ====================================================
"   Vundle
" ====================================================

" Required by Vundle
filetype off

set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()

" Vundle manage Vundle
Plugin 'gmarik/vundle'

" ========== Bundles ========== "

" Solarized
Plugin 'altercation/vim-colors-solarized'

" Shows a git diff in the 'gutter'
Plugin 'airblade/vim-gitgutter'

" Git wrapper
Plugin 'tpope/vim-fugitive'

" Pairs of handy bracket mappings
Plugin 'tpope/vim-unimpaired'

" Helpers for UNIX
Plugin 'tpope/vim-eunuch'

" Vim runtime files for Haml, Sass, and SCSS
Plugin 'tpope/vim-haml'

" Vim Markdown runtime files
Plugin 'tpope/vim-markdown'

" Expanding abbreviations
Plugin 'mattn/emmet-vim'

" Quoting/parenthesizing made simple
Plugin 'tpope/vim-surround'

" A light and configurable statusline
Plugin 'itchyny/lightline.vim'

" Fuzzy file finder
Plugin 'kien/ctrlp.vim'

" Syntax checking
Plugin 'scrooloose/syntastic'

" The ultimate snippet solution
Plugin 'SirVer/ultisnips'

" Universal comment plugin
Plugin 'vim-scripts/tComment'

call vundle#end()
filetype on

" ====================================================
"   Colors
" ====================================================

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
    syntax on
endif

set t_Co=256
let g:solarized_termtrans = 1

set background=dark
colorscheme solarized

" ====================================================
"   Solarized
" ====================================================

hi! LineNR guibg=NONE ctermbg=NONE
hi FoldColumn ctermbg=NONE
hi SignColumn ctermbg=NONE

" ====================================================
"   Turn off Swap Files
" ====================================================

set noswapfile
set nobackup
set nowb

" ====================================================
"   Indentation
" ====================================================

set autoindent
set smartindent
set smarttab
set shiftwidth=4
set softtabstop=4
set tabstop=4
set expandtab

set list listchars=tab:»·,trail:· "Display extra whitespace

set nowrap    "Don't wrap lines
set linebreak "Wrap at convenient points

" ====================================================
"   Scrolling
" ====================================================

set scrolloff=4

" ====================================================
"   Folds
" ====================================================

set foldcolumn=1

" ====================================================
"   Rulers
" ====================================================

set ruler
set textwidth=80
set colorcolumn=+1

" ====================================================
"   Search
" ====================================================

set cursorline
set incsearch
set hlsearch
set ignorecase
set smartcase

" ====================================================
"   Lightline
" ====================================================

let g:lightline = {
    \ 'colorscheme': 'solarized_dark',
   \ }

" ====================================================
"   Syntastic
" ====================================================

let g:syntastic_check_on_open = 1
let g:syntastic_html_checkers = ['w3']
let g:syntastic_scss_checkers = ['scss_lint']

filetype plugin indent on

augroup vimrcEx
    autocmd!

    " When editing a file, always jump to the last known cursor position.
    " Don't do it for commit messages, when the position is invalid, or when
    " inside an event handler (happens when dropping a file on gvim).
    autocmd BufReadPost *
        \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
        \   exe "normal g`\"" |
        \ endif

    " Set syntax highlighting for specific file types
    autocmd BufRead,BufNewFile Appraisals set filetype=ruby
    autocmd BufRead,BufNewFile *.md set filetype=markdown

    " Enable spellchecking for specific file types
    autocmd Filetype gitcommit setlocal spell textwidth=72
    autocmd FileType markdown setlocal spell

    " Automatically wrap at 80 characters for Markdown
    autocmd BufRead,BufNewFile *.md setlocal textwidth=80
augroup END

" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
    " Use Ag over Grep
    set grepprg=ag\ --nogroup\ --nocolor

    " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

    " ag is fast enough that CtrlP doesn't need to cache
    let g:ctrlp_use_caching = 0
endif

" Fix some problems with gitgutter and other plugins (originally jedi-vim, but
" left just in case, and it's faster)
let g:gitgutter_eager = 0
let g:gitgutter_realtime = 0

" ====================================================
"   Mappings
" ====================================================

" ========== General ========== "

" Better defaults
nnoremap ; :
inoremap jk <esc>

" Get off my lawn
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Window sizing
nnoremap + <C-w>>
nnoremap _ <C-w><

" Save file
noremap <C-s> <esc>:w<cr>
inoremap <C-s> <esc>:w<cr>

" Copy to end of line
nnoremap Y y$

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" ========== Leader ========== "

" == Non-Alphanumeric == "

" Switch between buffers
nnoremap ,, <C-^>

" == H == "

" Horizontal split
nnoremap <leader>h <C-w>s<C-w>j

" == L == "
"
" Clear the search buffer when hitting return
nnoremap <silent> <leader>l :nohlsearch<cr>

" == P == "

" Duplicate current line, paste after
nnoremap <leader>p Yp

" Nice paste
nnoremap <leader>P :set paste<cr>o<esc>"*]p :set nopaste<cr>

" == Q == "

" Quit
nnoremap <leader>q :q<cr>

" == R == "

" Open .vimrc
nnoremap <leader>rc :e ~/.dotfiles/vim/vimrc.symlink<cr>

" Replace current search with...
nnoremap <leader>rs :%s//

" == V == "

" Vertical split
nnoremap <leader>v <C-w>v<C-w>l

" == Y == "

" Copy line, paste before current line
nnoremap <leader>y YP

" == Z == "

" Quicker action to suspend Vim ('fg' to return)
nnoremap <leader>z <C-z>
